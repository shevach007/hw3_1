`timescale 1ns/1ps

module Sum #(
    parameter NOF_BITS = 32
) (
    input wire clk,
    input wire rst_n,
    input wire data_first,
    input wire data_last,
    input wire [NOF_BITS-1:0] data_in,
    output reg [NOF_BITS:0] data_out,
    output reg busy,    
    output reg done    
);

    // State machine states
    localparam IDLE = 3'b001;
    localparam SUM  = 3'b010;
    localparam DONE = 3'b100;

    // State registers
    reg [2:0] state, next_state;

    // Data registers
    reg [NOF_BITS:0] next_data_out;

    // Next state outputs
    reg next_busy, next_done;

    // Combinational logic: Determine next state and outputs
    always @(*) begin
        // Default assignments to prevent latches
        next_state = state;
        next_data_out = data_out;
        next_busy = 1'b0;
        next_done =1'b0;

        case (state)
            IDLE: begin
                if (data_first) begin
                    next_data_out = data_in;
                    next_busy = 1'b1;
                    next_state = (data_last) ? DONE : SUM;
                end
            end
            SUM: begin
                next_busy = 1'b1;
                next_data_out = data_out + data_in;
                if (data_last)
                    next_state = DONE;
                    next_done = 1'b1;
            end
            DONE: begin
                next_done =1'b1;
                next_state = IDLE; // Transition back to IDLE after DONE
            end
        endcase
    end

    // Sequential logic: Update state and outputs
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= IDLE;
            data_out <= {NOF_BITS+1{1'b0}};
            busy <= 1'b0;
            done <= 1'b0;
        end else begin
            state <= next_state;
            data_out <= next_data_out;
            busy <= next_busy;
            done <= next_done;
        end
    end

endmodule